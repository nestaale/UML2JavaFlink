[comment encoding = UTF-8 /]
[module generate('http://www.eclipse.org/emf/2002/Ecore', 'http://www.eclipse.org/uml2/5.0.0/UML')]


[template public generateElement(aModel : Model)]
[comment @main/]

[file (aModel.name.toLower().concat('/application/').concat(aModel.name.concat('.java')), false, 'UTF-8')]
package [aModel.name.toLower().concat('.application')/];

[for (c:Class | aModel.eContents(Class)) ]
  [if c.getStereotypeApplications()->asOrderedSet()->first().eClass().name = 'DataflowDataTypes']
     [for (subc:Class | c.eContents(Class)) ]
import [aModel.name.toLower()/].datatypes.[subc.name/]; [subc.datatypesgenerate()/]
    [/for]
  [else]
     [for (object:EObject | c.getStereotypeApplications()) ]
         [for (attribute:EAttribute | object.eClass().eAllAttributes) ]
         [if attribute.name.strstr('Function')]
import [aModel.name.toLower()/].functions.[c.name/]; [c.functionsgenerate()/]
         [/if]
         [/for]
     [/for]
  [/if]
[/for]
import org.apache.flink.streaming.api.datastream.DataStream;
import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;
import org.apache.flink.streaming.api.windowing.time.Time;

public class [aModel.name/] {

    public static void main(String['['/][']'/] args) throws Exception {

       final StreamExecutionEnvironment env = StreamExecutionEnvironment
               .getExecutionEnvironment();
       
       //uncomment the below if you want to set the default parallelism for the project.
       //env.setParallelism(1);

[for (c:Class | aModel.eContents(Class)) ]
  [for (object:EObject | c.getStereotypeApplications()) ]
    [if object.eClass().name.strstr('DataTypes')]
    [elseif object.eClass().name.strstr('DataSource')]  
       DataStream<[c.getSourceDirectedRelationships()->asOrderedSet()->first().eGet('conveyed').name/]> [c.getSourceDirectedRelationships()->asOrderedSet()->first().eGet('name')/] = env.socketTextStream("[object.eGet('host')/]", [object.eGet('port')/])
                .setParallelism([object.eGet('parallelism')/]);

    [elseif object.eClass().name.strstr('MapOperation')]  
       DataStream<[c.getSourceDirectedRelationships()->asOrderedSet()->first().eGet('conveyed').name/]> [c.getSourceDirectedRelationships()->asOrderedSet()->first().eGet('name')/] = [c.getTargetDirectedRelationships().eGet('name')/]
          .map(new [c.name/]);
          //.setParallelism([object.eGet('parallelism')/]);

    [elseif object.eClass().name.strstr('FileWriter')]
       [c.getTargetDirectedRelationships()->asOrderedSet()->first().eGet('name')/]
         [for (iskeyed:EObject | c.getTargetDirectedRelationships().getStereotypeApplications())]
          [if iskeyed.eClass().name = 'KeyedDataStream' ]
          .keyBy("[iskeyed.eGet('key').eGet('name')/]")
          [/if]
         [/for]
          .writeAsText("[object.eGet('filepath')/]")
          .setParallelism([object.eGet('parallelism')/]);

    [elseif object.eClass().name.strstr('TextFile')]
       [c.getTargetDirectedRelationships().eGet('name')/]
         [for (iskeyed:EObject | c.getTargetDirectedRelationships().getStereotypeApplications())]
          [if iskeyed.eClass().name = 'KeyedDataStream' ]
          .keyBy("[iskeyed.eGet('key').eGet('name')/]")
          [/if]
         [/for]
          AsText("[object.eGet('filepath')/]")
          .setParallelism([object.eGet('parallelism')/]);

    [else]
       DataStream<[c.getSourceDirectedRelationships()->asOrderedSet()->first().eGet('conveyed').name/]> [c.getSourceDirectedRelationships()->asOrderedSet()->first().eGet('name')/] = [c.getTargetDirectedRelationships()->asOrderedSet()->first().eGet('name')/]
       [for (datastream:EObject | c.getTargetDirectedRelationships().getStereotypeApplications()) ]
          [if datastream.eClass().name = 'KeyedDataStream' ]
          .keyBy("[datastream.eGet('key').eGet('name')/]")
          [/if]
          [if datastream.eClass().name = 'WindowedDataStream' ]
          .timeWindow[if datastream.eGet('window').eGet('isSliding') = true]All[/if](Time.[datastream.eGet('window').eGet('size').eGet('timeUnit').toString().toLower()/]([datastream.eGet('window').eGet('size').eGet('size')/]))
          .apply(new [c.name/]())
         [/if]
        [/for]
        [if object.eClass().name.strstr('FlatmapOperation')]
          .flatMap(new [c.name/]())
        [elseif object.eClass().name.strstr('SumOperation')]      
          .sum("[object.eGet('field').eGet('name')/]")
        [/if]
          .setParallelism([object.eGet('parallelism')/]);

    [/if]
  [/for]
[/for]

       env.execute();

    }
}
[/file]
[/template]





[template public functionsgenerate(aClass : Class)]
[file (aClass.getModel().name.toLower().concat('/functions/').concat(aClass.name).concat('.java'), false)]
package [aClass.getModel().name.toLower().concat('.functions')/];

  [for (c:Class | aClass.getModel().eContents(Class)) ]
    [if c.getStereotypeApplications()->asOrderedSet()->first().eClass().name = 'DataflowDataTypes']
      [for (subc:Class | c.eContents(Class)) ]
import [aClass.getModel().name.toLower()/].datatypes.[subc.name/];
      [/for]
    [/if]
  [/for]

  [for (object:EObject | aClass.getStereotypeApplications()) ]
    [for (attribute:EAttribute | object.eClass().eAllAttributes) ]
       [if attribute.name.equalsIgnoreCase('FlatMapFunction')]
import org.apache.flink.api.common.functions.FlatMapFunction;
       [/if]       
       [if attribute.name.equalsIgnoreCase('MapFunction')]
import org.apache.flink.api.common.functions.RichMapFunction;
       [/if]
       [if attribute.name.equalsIgnoreCase('applyFunction')]
import org.apache.flink.configuration.Configuration;
         [for (dstype:EObject | aClass.getTargetDirectedRelationships().getStereotypeApplications())]
		  [if (dstype.eClass().name = 'WindowedDataStream')]
          [elseif (dstype.eClass().name = 'KeyedDataStream')]
import org.apache.flink.api.java.tuple.Tuple;
import org.apache.flink.streaming.api.functions.windowing.RichWindowFunction;
          [else]
import org.apache.flink.streaming.api.functions.windowing.RichAllWindowFunction;
          [/if]
         [/for]
import org.apache.flink.streaming.api.windowing.windows.TimeWindow;
       [/if]
    [/for]
  [/for]
import org.apache.flink.util.Collector;

  [for (object:EObject | aClass.getStereotypeApplications()) ]
    [for (attribute:EAttribute | object.eClass().eAllAttributes) ]
[if (object.eGet(attribute).toString().strstr('Map'))]
import java.util.HashMap;
import java.util.Map;
[/if]

       [if attribute.name.strstr('Function')]
         [if attribute.name.equalsIgnoreCase('FlatmapFunction')]
public class [aClass.name.toUpperFirst()/] implements [attribute.name.toUpperFirst()/]<[aClass.getTargetDirectedRelationships()->asOrderedSet()->first().eGet('conveyed').name/], [aClass.getSourceDirectedRelationships()->asOrderedSet()->first().eGet('conveyed').name/]> {

  @Override
  public void [attribute.name.substring(1,attribute.name.size()-8)/] ([aClass.getTargetDirectedRelationships()->asOrderedSet()->first().eGet('conveyed').name/] value, Collector<[aClass.getSourceDirectedRelationships()->asOrderedSet()->first().eGet('conveyed').name/]> out) {
    [object.eGet(attribute)/]
  }
}
         [elseif attribute.name.equalsIgnoreCase('mapFunction')]
public class [aClass.name.toUpperFirst()/] extends RichMapFunction<[aClass.getTargetDirectedRelationships()->asOrderedSet()->first().eGet('conveyed').name/], [aClass.getSourceDirectedRelationships()->asOrderedSet()->first().eGet('conveyed').name/]> {

  @Override
  public [aClass.getSourceDirectedRelationships().eGet('conveyed').name/] [attribute.name.substring(1,attribute.name.size()-8)/] ([aClass.getTargetDirectedRelationships()->asOrderedSet()->first().eGet('conveyed').name/] value) throws Exception {
    [object.eGet(attribute)/]
  }
}
         [elseif attribute.name.equalsIgnoreCase('applyFunction')]
         [for (dstype:EObject | aClass.getTargetDirectedRelationships().getStereotypeApplications())]
		  [if (dstype.eClass().name = 'WindowedDataStream')]
          [elseif (dstype.eClass().name = 'KeyedDataStream')]
public class [aClass.name.toUpperFirst()/] extends RichWindowFunction<[aClass.getTargetDirectedRelationships()->asOrderedSet()->first().eGet('conveyed').name/], [aClass.getSourceDirectedRelationships()->asOrderedSet()->first().eGet('conveyed').name/], Tuple, TimeWindow> {
          [else]
public class [aClass.name.toUpperFirst()/] extends RichAllWindowFunction<[aClass.getTargetDirectedRelationships()->asOrderedSet()->first().eGet('conveyed').name/], [aClass.getSourceDirectedRelationships()->asOrderedSet()->first().eGet('conveyed').name/], TimeWindow> {
          [/if]
        [/for]

  @Override
  public void open(Configuration parameters) throws Exception {

  }

  @Override
[if attribute.name.strstr('mapFunction')]
  public void [attribute.name.substring(1,attribute.name.size()-8)/] ([aClass.getTargetDirectedRelationships()->asOrderedSet()->first().eGet('conveyed').name/] value, Collector<[aClass.getSourceDirectedRelationships()->asOrderedSet()->first().eGet('conveyed').name/]> out) throws Exception {
[elseif attribute.name.equalsIgnoreCase('applyFunction')]
         [for (dstype:EObject | aClass.getTargetDirectedRelationships().getStereotypeApplications())]
		  [if (dstype.eClass().name = 'WindowedDataStream')]
          [elseif (dstype.eClass().name = 'KeyedDataStream')]
  public void [attribute.name.substring(1,attribute.name.size()-8)/] (Tuple value, TimeWindow timeWindow, Iterable<[aClass.getTargetDirectedRelationships()->asOrderedSet()->first().eGet('conveyed').name/]> iterable, Collector<[aClass.getSourceDirectedRelationships()->asOrderedSet()->first().eGet('conveyed').name/]> collector) throws Exception {
          [else]
  public void [attribute.name.substring(1,attribute.name.size()-8)/] (TimeWindow timeWindow, Iterable<[aClass.getTargetDirectedRelationships()->asOrderedSet()->first().eGet('conveyed').name/]> iterable, Collector<[aClass.getSourceDirectedRelationships()->asOrderedSet()->first().eGet('conveyed').name/]> collector) throws Exception {
          [/if]
         [/for]

[/if]
    [object.eGet(attribute)/]
  }
}
         [/if]
      [/if]
    [/for]
  [/for]
[/file]
[/template]



[template public datatypesgenerate(aClass : Class)]
[file (aClass.getModel().name.toLower().concat('/datatypes/').concat(aClass.name).concat('.java'), false)]
package [aClass.getModel().name.toLower().concat('.datatypes')/];

public class [aClass.name/] {

  [for (p: Property | aClass.attribute) separator('\n')]
    private [p.type.name/] [p.name/];
  [/for]
 
    public [aClass.name/]() {

    }

    public [aClass.name/]([for (p: Property | aClass.attribute) separator(', ')][p.type.name/] [p.name/][/for]) {
    [for (p: Property | aClass.attribute)]
        this.[p.name/] = [p.name/];
    [/for]     
    }

    [for (p: Property | aClass.attribute) separator('\n')]
    public [p.type.name/] get[p.name/]() {
        return [p.name/];
    }

    public void set[p.name/]([p.type.name/] [p.name/]) {
        this.[p.name/] = [p.name/];
    }
    [/for]
 
    @Override
    public String toString() {
        return "(" + [for (p: Property | aClass.attribute) separator(' + "," + ')]this.[p.name/][/for] + ")";
    }

}
[/file]
[/template]
